def nexusCredentials = usernamePassword(
	credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')

def gitCredentials = usernamePassword(
	credentialsId: 'github-credentials',
    usernameVariable: 'GITHUB_LOGIN',
    passwordVariable: 'GITHUB_TOKEN')

def dockerCredentials = usernamePassword(
	credentialsId: 'docker-registry-credentials',
    passwordVariable: 'DOCKER_PASSWORD',
    usernameVariable: 'DOCKER_LOGIN')

def artifactoryCredentials = usernamePassword(
    credentialsId: 'artifactory-datapwn-credentials',
    passwordVariable: 'ARTIFACTORY_PASSWORD',
    usernameVariable: 'ARTIFACTORY_LOGIN')

def branch = env.BRANCH_NAME
def repo = 'components'
def slackChannel = 'components-ci'
def escaped_branch = branch.toLowerCase().replaceAll("/", "_")
def PRODUCTION_DEPLOYMENT_REPOSITORY = "snapshots"
def deploymentSuffix = (env.BRANCH_NAME == "master" || env.BRANCH_NAME.startsWith("maintenance/")) ? "${PRODUCTION_DEPLOYMENT_REPOSITORY}" : "dev_branch_snapshots/branch_${escaped_branch}"
def m2 = "/tmp/jenkins/tdi/m2/${deploymentSuffix}"
def podLabel = "components-${UUID.randomUUID().toString()}".take(53)

pipeline {
  agent {
        kubernetes {
            label podLabel
            yaml """
apiVersion: v1
kind: Pod
spec:
    containers:
        -
            name: main
            image: '${env.TSBI_IMAGE}'
            command: [cat]
            tty: true
            volumeMounts: [{name: m2main, mountPath: /root/.m2/repository}]
            resources: {requests: {memory: 3G, cpu: '2.5'}, limits: {memory: 3G, cpu: '2.5'}}
            env:
              - name: DOCKER_HOST
                value: tcp://localhost:2375
        -
            name: dind-daemon
            image: docker:19.03-dind
            resources:
                requests:
                    cpu: 2.5
                    memory: 3G
            securityContext:
                privileged: true
            volumeMounts:
              - name: docker-graph-storage
                mountPath: /var/lib/docker
            env:
              - name: DOCKER_TLS_CERTDIR
                value: ""
    volumes:
        -
            name: m2main
            hostPath: {path: ${m2} }
        -
            name: docker-graph-storage
            emptyDir: {}
    imagePullSecrets:
        - name: talend-registry
"""
        }
    }

  environment {
    MAVEN_OPTS = "-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss -Dtalend.maven.decrypter.m2.location=${WORKSPACE}/.jenkins/"
    ARTIFACTORY_REGISTRY = "artifactory.datapwn.com"
    REPOSITORY = 'components'
  }

  options {
    timeout(time: 120, unit: 'MINUTES')
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }

  parameters {
    choice(name: 'Action',
            choices: ['STANDARD', 'RELEASE'],
            description: 'Kind of running : \nSTANDARD (default), normal building \nRELEASE : build release')
    booleanParam(name: 'DRAFT', defaultValue: true, description: 'Create a draft changelog.')
  }

  stages {
    stage('Compile | Test') {
      when {
        expression { params.Action == 'STANDARD' }
      }
      steps {
        container('main') {
           withCredentials([gitCredentials, nexusCredentials, dockerCredentials, artifactoryCredentials]) {
             sh '''#!/bin/bash
             docker version
             echo $ARTIFACTORY_PASSWORD | docker login $ARTIFACTORY_REGISTRY -u $ARTIFACTORY_LOGIN --password-stdin
             mvn clean -B -U -V install
             '''
           }
        }
      }
    }

    stage('Compile | Test | Deploy') {
      when {
        expression { params.Action == 'RELEASE' }
      }
      steps {
        container('main') {
          withCredentials([gitCredentials, nexusCredentials, dockerCredentials, artifactoryCredentials]) {
            env.RELEASE_VERSION = sh(returnStdout: true, script: "mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout | cut -d- -f1").trim()
            /*sh '''#!/bin/bash
            docker version
            echo $ARTIFACTORY_PASSWORD | docker login $ARTIFACTORY_REGISTRY -u $ARTIFACTORY_LOGIN --password-stdin
            mvn clean -B -U -V -s ci/settings.xml deploy
            '''*/
            // -Dgit_branch="${escaped_branch}" \
            // -Dbigquery.project="${bigquery_project}" \
            // -Dbigquery.service.account.file="${service_account_file}" \
            // -Dbigquery.gcp.temp.folder="${bigquery_gcp_temp_folder}" \
            // -Dorg.talend.components.google.drive.service_account_file="${google_drive_service_account_file}"
          }
        }
      }
      post {
          success {
              container('main') {
                  withCredentials([gitCredentials]) {
                      script {
                          env.DRAFT = params.DRAFT
                          env.BRANCH_NAME = 'master'
                          sh "sh .jenkins/changelog.sh"
                      }
                  }
              }
          }
      }
    }
  }

  post {
    success {
        slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
    }
    failure {
        slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
    }
  }
}
